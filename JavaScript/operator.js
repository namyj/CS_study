alert(5%3); // 나머지
alert(2**3); // 제곱

alert(4**(1/2)); // 1/2 제곱 -> 제곱근
alert(8**(1/3)); // 1/3 제곱 -> 세 제곱근

// + : 문자열 연결
let str = "st" + "ring";
alert(str); // string

alert(1 + "2"); // "12" 피연산자 중 하나가 문자열 -> 문자열 반환
alert(2+2+"1"); //"41"

// + : 숫자형 변환 (== Number())
alert( +true); // 1
alert( +false); // 0
alert( +""); // 0
alert(typeof +"123"); // number

let op1 = "2";
let op2 = "3";
alert(op1 + op2); // "23"
alert(+op1 + +op2); // 5

// = : 할당 연산자
// 값을 반환함
let op3 = 1;
let op4 = 2;
let op5 = 3 - (op3 = op4+1); // op3 = 3, op5 = 0

// +=, -=, ... : 복합 할당 연산자, 할당 연산자와 우선순위 동일
let op6 = 2;
op6 *= 3+5; // op6 = 16

/*
증감 연산자
- 변수에만 사용 가능
- 전위형 vs 후위형 (반환값을 사용하는 경우 주의!!) 
    - 전위형(++var): 증감후 새로운 값 반환
    - 후위형(var++): 증감전 기존 값 반환
*/
let cnt = 2;
alert(cnt++); // 2
cnt = 2;
alert(++cnt); // 3
cnt = 2;
alert(cnt--); // 2
cnt = 2;
alert(--cnt); // 1

cnt = 1;
alert(2 * cnt++); // 2
cnt = 1;
alert(2 * ++cnt); // 4

/**
쉼표 연산자
- 여러 표현식을 코드 한줄에서 실행 가능
- 우선순위 매우 낮음 = >> , 
- (주의) 마지막 표현식의 결과만 반환됨
 */

let op7 = (1+2, 3+4) // op7 = 7

// HW1
"" + 1 + 0 = "1" + 0 = "10"
"" - 1 + 0 = 0 - 1 + 0 = -1
true + false = 1 + 0 = 1
6 / "3" = 6 / 3 = 2
"2" * "3" = 2 * 2 = 6
4 + 5 + "px" = 9 + "px" = "9px"
"$" + 4 + 5 = "$4" + 5 = "$45"
"4" - 2 = 4 -2 = 2
"4px" - 2 = NaN -2 = NaN
7 / 0 = Infinity
"  -9  " + 5 = "  -9  5"
"  -9  " - 5 = "-9" - 5 = -9 -5 = -14
null + 1 = 0 + 1 = 1 
undefined + 1 = NaN + 1 = NaN
" \t \n" - 2 = "" - 2 = 0 -2 = -2 // 문자열이 숫자형으로 변할 때 앞뒤 공백이 삭제됨 -> \t, \n 공백을 만드는 문자 -> 따라서 "  \t \n  " => "" 길이가 0 인 문자열 -> 숫자 0 

// HW2
let a = +prompt("덧셈할 첫 번째 숫자를 입력해주세요.", 1);
let b = +prompt("덧셈할 두 번째 숫자를 입력해주세요.", 2);

alert(a + b); // (error) 12 -> (solve) 3